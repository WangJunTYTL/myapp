/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package service.demo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FirstRequest implements org.apache.thrift.TBase<FirstRequest, FirstRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FirstRequest");

  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MAP_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("mapObj", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField LIST_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("listObj", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField BINARY_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryObj", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleObj", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ENUM_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("enumObj", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FirstRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FirstRequestTupleSchemeFactory());
  }

  public int number; // optional
  public String msg; // required
  public Map<String,String> mapObj; // optional
  public List<Integer> listObj; // optional
  public ByteBuffer binaryObj; // optional
  public double doubleObj; // optional
  /**
   * 
   * @see EnumObj
   */
  public EnumObj enumObj; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER((short)1, "number"),
    MSG((short)2, "msg"),
    MAP_OBJ((short)3, "mapObj"),
    LIST_OBJ((short)4, "listObj"),
    BINARY_OBJ((short)5, "binaryObj"),
    DOUBLE_OBJ((short)6, "doubleObj"),
    /**
     * 
     * @see EnumObj
     */
    ENUM_OBJ((short)7, "enumObj");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER
          return NUMBER;
        case 2: // MSG
          return MSG;
        case 3: // MAP_OBJ
          return MAP_OBJ;
        case 4: // LIST_OBJ
          return LIST_OBJ;
        case 5: // BINARY_OBJ
          return BINARY_OBJ;
        case 6: // DOUBLE_OBJ
          return DOUBLE_OBJ;
        case 7: // ENUM_OBJ
          return ENUM_OBJ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER_ISSET_ID = 0;
  private static final int __DOUBLEOBJ_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.NUMBER,_Fields.MAP_OBJ,_Fields.LIST_OBJ,_Fields.BINARY_OBJ,_Fields.DOUBLE_OBJ,_Fields.ENUM_OBJ};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_OBJ, new org.apache.thrift.meta_data.FieldMetaData("mapObj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LIST_OBJ, new org.apache.thrift.meta_data.FieldMetaData("listObj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BINARY_OBJ, new org.apache.thrift.meta_data.FieldMetaData("binaryObj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DOUBLE_OBJ, new org.apache.thrift.meta_data.FieldMetaData("doubleObj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENUM_OBJ, new org.apache.thrift.meta_data.FieldMetaData("enumObj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EnumObj.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FirstRequest.class, metaDataMap);
  }

  public FirstRequest() {
  }

  public FirstRequest(
    String msg)
  {
    this();
    this.msg = msg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FirstRequest(FirstRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.number = other.number;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetMapObj()) {
      Map<String,String> __this__mapObj = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.mapObj.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__mapObj_copy_key = other_element_key;

        String __this__mapObj_copy_value = other_element_value;

        __this__mapObj.put(__this__mapObj_copy_key, __this__mapObj_copy_value);
      }
      this.mapObj = __this__mapObj;
    }
    if (other.isSetListObj()) {
      List<Integer> __this__listObj = new ArrayList<Integer>();
      for (Integer other_element : other.listObj) {
        __this__listObj.add(other_element);
      }
      this.listObj = __this__listObj;
    }
    if (other.isSetBinaryObj()) {
      this.binaryObj = org.apache.thrift.TBaseHelper.copyBinary(other.binaryObj);
;
    }
    this.doubleObj = other.doubleObj;
    if (other.isSetEnumObj()) {
      this.enumObj = other.enumObj;
    }
  }

  public FirstRequest deepCopy() {
    return new FirstRequest(this);
  }

  @Override
  public void clear() {
    setNumberIsSet(false);
    this.number = 0;
    this.msg = null;
    this.mapObj = null;
    this.listObj = null;
    this.binaryObj = null;
    setDoubleObjIsSet(false);
    this.doubleObj = 0.0;
    this.enumObj = null;
  }

  public int getNumber() {
    return this.number;
  }

  public FirstRequest setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bit_vector.clear(__NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return __isset_bit_vector.get(__NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBER_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public FirstRequest setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public int getMapObjSize() {
    return (this.mapObj == null) ? 0 : this.mapObj.size();
  }

  public void putToMapObj(String key, String val) {
    if (this.mapObj == null) {
      this.mapObj = new HashMap<String,String>();
    }
    this.mapObj.put(key, val);
  }

  public Map<String,String> getMapObj() {
    return this.mapObj;
  }

  public FirstRequest setMapObj(Map<String,String> mapObj) {
    this.mapObj = mapObj;
    return this;
  }

  public void unsetMapObj() {
    this.mapObj = null;
  }

  /** Returns true if field mapObj is set (has been assigned a value) and false otherwise */
  public boolean isSetMapObj() {
    return this.mapObj != null;
  }

  public void setMapObjIsSet(boolean value) {
    if (!value) {
      this.mapObj = null;
    }
  }

  public int getListObjSize() {
    return (this.listObj == null) ? 0 : this.listObj.size();
  }

  public java.util.Iterator<Integer> getListObjIterator() {
    return (this.listObj == null) ? null : this.listObj.iterator();
  }

  public void addToListObj(int elem) {
    if (this.listObj == null) {
      this.listObj = new ArrayList<Integer>();
    }
    this.listObj.add(elem);
  }

  public List<Integer> getListObj() {
    return this.listObj;
  }

  public FirstRequest setListObj(List<Integer> listObj) {
    this.listObj = listObj;
    return this;
  }

  public void unsetListObj() {
    this.listObj = null;
  }

  /** Returns true if field listObj is set (has been assigned a value) and false otherwise */
  public boolean isSetListObj() {
    return this.listObj != null;
  }

  public void setListObjIsSet(boolean value) {
    if (!value) {
      this.listObj = null;
    }
  }

  public byte[] getBinaryObj() {
    setBinaryObj(org.apache.thrift.TBaseHelper.rightSize(binaryObj));
    return binaryObj == null ? null : binaryObj.array();
  }

  public ByteBuffer bufferForBinaryObj() {
    return binaryObj;
  }

  public FirstRequest setBinaryObj(byte[] binaryObj) {
    setBinaryObj(binaryObj == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryObj));
    return this;
  }

  public FirstRequest setBinaryObj(ByteBuffer binaryObj) {
    this.binaryObj = binaryObj;
    return this;
  }

  public void unsetBinaryObj() {
    this.binaryObj = null;
  }

  /** Returns true if field binaryObj is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryObj() {
    return this.binaryObj != null;
  }

  public void setBinaryObjIsSet(boolean value) {
    if (!value) {
      this.binaryObj = null;
    }
  }

  public double getDoubleObj() {
    return this.doubleObj;
  }

  public FirstRequest setDoubleObj(double doubleObj) {
    this.doubleObj = doubleObj;
    setDoubleObjIsSet(true);
    return this;
  }

  public void unsetDoubleObj() {
    __isset_bit_vector.clear(__DOUBLEOBJ_ISSET_ID);
  }

  /** Returns true if field doubleObj is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleObj() {
    return __isset_bit_vector.get(__DOUBLEOBJ_ISSET_ID);
  }

  public void setDoubleObjIsSet(boolean value) {
    __isset_bit_vector.set(__DOUBLEOBJ_ISSET_ID, value);
  }

  /**
   * 
   * @see EnumObj
   */
  public EnumObj getEnumObj() {
    return this.enumObj;
  }

  /**
   * 
   * @see EnumObj
   */
  public FirstRequest setEnumObj(EnumObj enumObj) {
    this.enumObj = enumObj;
    return this;
  }

  public void unsetEnumObj() {
    this.enumObj = null;
  }

  /** Returns true if field enumObj is set (has been assigned a value) and false otherwise */
  public boolean isSetEnumObj() {
    return this.enumObj != null;
  }

  public void setEnumObjIsSet(boolean value) {
    if (!value) {
      this.enumObj = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case MAP_OBJ:
      if (value == null) {
        unsetMapObj();
      } else {
        setMapObj((Map<String,String>)value);
      }
      break;

    case LIST_OBJ:
      if (value == null) {
        unsetListObj();
      } else {
        setListObj((List<Integer>)value);
      }
      break;

    case BINARY_OBJ:
      if (value == null) {
        unsetBinaryObj();
      } else {
        setBinaryObj((ByteBuffer)value);
      }
      break;

    case DOUBLE_OBJ:
      if (value == null) {
        unsetDoubleObj();
      } else {
        setDoubleObj((Double)value);
      }
      break;

    case ENUM_OBJ:
      if (value == null) {
        unsetEnumObj();
      } else {
        setEnumObj((EnumObj)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER:
      return Integer.valueOf(getNumber());

    case MSG:
      return getMsg();

    case MAP_OBJ:
      return getMapObj();

    case LIST_OBJ:
      return getListObj();

    case BINARY_OBJ:
      return getBinaryObj();

    case DOUBLE_OBJ:
      return Double.valueOf(getDoubleObj());

    case ENUM_OBJ:
      return getEnumObj();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMBER:
      return isSetNumber();
    case MSG:
      return isSetMsg();
    case MAP_OBJ:
      return isSetMapObj();
    case LIST_OBJ:
      return isSetListObj();
    case BINARY_OBJ:
      return isSetBinaryObj();
    case DOUBLE_OBJ:
      return isSetDoubleObj();
    case ENUM_OBJ:
      return isSetEnumObj();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FirstRequest)
      return this.equals((FirstRequest)that);
    return false;
  }

  public boolean equals(FirstRequest that) {
    if (that == null)
      return false;

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_mapObj = true && this.isSetMapObj();
    boolean that_present_mapObj = true && that.isSetMapObj();
    if (this_present_mapObj || that_present_mapObj) {
      if (!(this_present_mapObj && that_present_mapObj))
        return false;
      if (!this.mapObj.equals(that.mapObj))
        return false;
    }

    boolean this_present_listObj = true && this.isSetListObj();
    boolean that_present_listObj = true && that.isSetListObj();
    if (this_present_listObj || that_present_listObj) {
      if (!(this_present_listObj && that_present_listObj))
        return false;
      if (!this.listObj.equals(that.listObj))
        return false;
    }

    boolean this_present_binaryObj = true && this.isSetBinaryObj();
    boolean that_present_binaryObj = true && that.isSetBinaryObj();
    if (this_present_binaryObj || that_present_binaryObj) {
      if (!(this_present_binaryObj && that_present_binaryObj))
        return false;
      if (!this.binaryObj.equals(that.binaryObj))
        return false;
    }

    boolean this_present_doubleObj = true && this.isSetDoubleObj();
    boolean that_present_doubleObj = true && that.isSetDoubleObj();
    if (this_present_doubleObj || that_present_doubleObj) {
      if (!(this_present_doubleObj && that_present_doubleObj))
        return false;
      if (this.doubleObj != that.doubleObj)
        return false;
    }

    boolean this_present_enumObj = true && this.isSetEnumObj();
    boolean that_present_enumObj = true && that.isSetEnumObj();
    if (this_present_enumObj || that_present_enumObj) {
      if (!(this_present_enumObj && that_present_enumObj))
        return false;
      if (!this.enumObj.equals(that.enumObj))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FirstRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FirstRequest typedOther = (FirstRequest)other;

    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapObj()).compareTo(typedOther.isSetMapObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapObj, typedOther.mapObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListObj()).compareTo(typedOther.isSetListObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listObj, typedOther.listObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryObj()).compareTo(typedOther.isSetBinaryObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryObj, typedOther.binaryObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleObj()).compareTo(typedOther.isSetDoubleObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleObj, typedOther.doubleObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnumObj()).compareTo(typedOther.isSetEnumObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnumObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enumObj, typedOther.enumObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FirstRequest(");
    boolean first = true;

    if (isSetNumber()) {
      sb.append("number:");
      sb.append(this.number);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (isSetMapObj()) {
      if (!first) sb.append(", ");
      sb.append("mapObj:");
      if (this.mapObj == null) {
        sb.append("null");
      } else {
        sb.append(this.mapObj);
      }
      first = false;
    }
    if (isSetListObj()) {
      if (!first) sb.append(", ");
      sb.append("listObj:");
      if (this.listObj == null) {
        sb.append("null");
      } else {
        sb.append(this.listObj);
      }
      first = false;
    }
    if (isSetBinaryObj()) {
      if (!first) sb.append(", ");
      sb.append("binaryObj:");
      if (this.binaryObj == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryObj, sb);
      }
      first = false;
    }
    if (isSetDoubleObj()) {
      if (!first) sb.append(", ");
      sb.append("doubleObj:");
      sb.append(this.doubleObj);
      first = false;
    }
    if (isSetEnumObj()) {
      if (!first) sb.append(", ");
      sb.append("enumObj:");
      if (this.enumObj == null) {
        sb.append("null");
      } else {
        sb.append(this.enumObj);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (msg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'msg' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FirstRequestStandardSchemeFactory implements SchemeFactory {
    public FirstRequestStandardScheme getScheme() {
      return new FirstRequestStandardScheme();
    }
  }

  private static class FirstRequestStandardScheme extends StandardScheme<FirstRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FirstRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAP_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.mapObj = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.mapObj.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setMapObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIST_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.listObj = new ArrayList<Integer>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  int _elem6; // required
                  _elem6 = iprot.readI32();
                  struct.listObj.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setListObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BINARY_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryObj = iprot.readBinary();
              struct.setBinaryObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleObj = iprot.readDouble();
              struct.setDoubleObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENUM_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enumObj = EnumObj.findByValue(iprot.readI32());
              struct.setEnumObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FirstRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNumber()) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      if (struct.mapObj != null) {
        if (struct.isSetMapObj()) {
          oprot.writeFieldBegin(MAP_OBJ_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapObj.size()));
            for (Map.Entry<String, String> _iter7 : struct.mapObj.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              oprot.writeString(_iter7.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.listObj != null) {
        if (struct.isSetListObj()) {
          oprot.writeFieldBegin(LIST_OBJ_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.listObj.size()));
            for (int _iter8 : struct.listObj)
            {
              oprot.writeI32(_iter8);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryObj != null) {
        if (struct.isSetBinaryObj()) {
          oprot.writeFieldBegin(BINARY_OBJ_FIELD_DESC);
          oprot.writeBinary(struct.binaryObj);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDoubleObj()) {
        oprot.writeFieldBegin(DOUBLE_OBJ_FIELD_DESC);
        oprot.writeDouble(struct.doubleObj);
        oprot.writeFieldEnd();
      }
      if (struct.enumObj != null) {
        if (struct.isSetEnumObj()) {
          oprot.writeFieldBegin(ENUM_OBJ_FIELD_DESC);
          oprot.writeI32(struct.enumObj.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FirstRequestTupleSchemeFactory implements SchemeFactory {
    public FirstRequestTupleScheme getScheme() {
      return new FirstRequestTupleScheme();
    }
  }

  private static class FirstRequestTupleScheme extends TupleScheme<FirstRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FirstRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.msg);
      BitSet optionals = new BitSet();
      if (struct.isSetNumber()) {
        optionals.set(0);
      }
      if (struct.isSetMapObj()) {
        optionals.set(1);
      }
      if (struct.isSetListObj()) {
        optionals.set(2);
      }
      if (struct.isSetBinaryObj()) {
        optionals.set(3);
      }
      if (struct.isSetDoubleObj()) {
        optionals.set(4);
      }
      if (struct.isSetEnumObj()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetMapObj()) {
        {
          oprot.writeI32(struct.mapObj.size());
          for (Map.Entry<String, String> _iter9 : struct.mapObj.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
        }
      }
      if (struct.isSetListObj()) {
        {
          oprot.writeI32(struct.listObj.size());
          for (int _iter10 : struct.listObj)
          {
            oprot.writeI32(_iter10);
          }
        }
      }
      if (struct.isSetBinaryObj()) {
        oprot.writeBinary(struct.binaryObj);
      }
      if (struct.isSetDoubleObj()) {
        oprot.writeDouble(struct.doubleObj);
      }
      if (struct.isSetEnumObj()) {
        oprot.writeI32(struct.enumObj.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FirstRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.msg = iprot.readString();
      struct.setMsgIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.mapObj = new HashMap<String,String>(2*_map11.size);
          for (int _i12 = 0; _i12 < _map11.size; ++_i12)
          {
            String _key13; // required
            String _val14; // required
            _key13 = iprot.readString();
            _val14 = iprot.readString();
            struct.mapObj.put(_key13, _val14);
          }
        }
        struct.setMapObjIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.listObj = new ArrayList<Integer>(_list15.size);
          for (int _i16 = 0; _i16 < _list15.size; ++_i16)
          {
            int _elem17; // required
            _elem17 = iprot.readI32();
            struct.listObj.add(_elem17);
          }
        }
        struct.setListObjIsSet(true);
      }
      if (incoming.get(3)) {
        struct.binaryObj = iprot.readBinary();
        struct.setBinaryObjIsSet(true);
      }
      if (incoming.get(4)) {
        struct.doubleObj = iprot.readDouble();
        struct.setDoubleObjIsSet(true);
      }
      if (incoming.get(5)) {
        struct.enumObj = EnumObj.findByValue(iprot.readI32());
        struct.setEnumObjIsSet(true);
      }
    }
  }

}

