#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EnumObj:
  FOO = 1
  BAR = 2

  _VALUES_TO_NAMES = {
    1: "FOO",
    2: "BAR",
  }

  _NAMES_TO_VALUES = {
    "FOO": 1,
    "BAR": 2,
  }


class FirstRequest:
  """
  Attributes:
   - number
   - msg
   - mapObj
   - listObj
   - binaryObj
   - doubleObj
   - enumObj
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'number', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
    (3, TType.MAP, 'mapObj', (TType.STRING,None,TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'listObj', (TType.I32,None), None, ), # 4
    (5, TType.STRING, 'binaryObj', None, None, ), # 5
    (6, TType.DOUBLE, 'doubleObj', None, None, ), # 6
    (7, TType.I32, 'enumObj', None, None, ), # 7
  )

  def __init__(self, number=None, msg=None, mapObj=None, listObj=None, binaryObj=None, doubleObj=None, enumObj=None,):
    self.number = number
    self.msg = msg
    self.mapObj = mapObj
    self.listObj = listObj
    self.binaryObj = binaryObj
    self.doubleObj = doubleObj
    self.enumObj = enumObj

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.number = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.mapObj = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.mapObj[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.listObj = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.listObj.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.binaryObj = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.doubleObj = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.enumObj = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FirstRequest')
    if self.number is not None:
      oprot.writeFieldBegin('number', TType.I32, 1)
      oprot.writeI32(self.number)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.mapObj is not None:
      oprot.writeFieldBegin('mapObj', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.mapObj))
      for kiter13,viter14 in self.mapObj.items():
        oprot.writeString(kiter13)
        oprot.writeString(viter14)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.listObj is not None:
      oprot.writeFieldBegin('listObj', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.listObj))
      for iter15 in self.listObj:
        oprot.writeI32(iter15)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.binaryObj is not None:
      oprot.writeFieldBegin('binaryObj', TType.STRING, 5)
      oprot.writeString(self.binaryObj)
      oprot.writeFieldEnd()
    if self.doubleObj is not None:
      oprot.writeFieldBegin('doubleObj', TType.DOUBLE, 6)
      oprot.writeDouble(self.doubleObj)
      oprot.writeFieldEnd()
    if self.enumObj is not None:
      oprot.writeFieldBegin('enumObj', TType.I32, 7)
      oprot.writeI32(self.enumObj)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FirstResponse:
  """
  Attributes:
   - number
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'number', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, number=None, msg=None,):
    self.number = number
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.number = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FirstResponse')
    if self.number is not None:
      oprot.writeFieldBegin('number', TType.I32, 1)
      oprot.writeI32(self.number)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
